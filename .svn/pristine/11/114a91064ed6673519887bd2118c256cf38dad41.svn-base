package com.zhongz.rental.service.impl;

import com.ruoyi.common.core.text.Convert;
import com.zhongz.rental.domain.ZhongzEstate;
import com.zhongz.rental.domain.ZhongzHouse;
import com.zhongz.rental.mapper.ZhongzEstateMapper;
import com.zhongz.rental.mapper.ZhongzHouseMapper;
import com.zhongz.rental.mapper.ZhongzRoomMapper;
import com.zhongz.rental.param.ZhongzHouseParam;
import com.zhongz.rental.service.IZhongzHouseService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

/**
 * 房屋 服务层实现
 * 
 * @author ruoyi
 * @date 2019-04-04
 */
@Service
public class ZhongzHouseServiceImpl implements IZhongzHouseService
{
	@Autowired
	private ZhongzHouseMapper zhongzHouseMapper;
	@Autowired
	private ZhongzRoomMapper zhongzRoomMapper;
	@Autowired
	private ZhongzEstateMapper zhongzEstateMapper;

	/**
     * 查询房屋信息
     * 
     * @param id 房屋ID
     * @return 房屋信息
     */
    @Override
	public ZhongzHouse selectZhongzHouseById(String id)
	{
	    return zhongzHouseMapper.selectZhongzHouseById(id);
	}
	
	/**
     * 查询房屋列表
     * 
     * @param zhongzHouse 房屋信息
     * @return 房屋集合
     */
	@Override
	public List<ZhongzHouse> selectZhongzHouseList(ZhongzHouse zhongzHouse)
	{
	    return zhongzHouseMapper.selectZhongzHouseList(zhongzHouse);
	}

	/**
	 * 客户端首页可租房源列表
	 *
	 * @param zhongzHouseParam 房屋信息
	 * @return 房屋集合
	 */
	@Override
	public List<ZhongzHouse> selectZhongzHouseList1(ZhongzHouseParam zhongzHouseParam)
	{
		List<String> houseIds = new ArrayList<>();
		//所有前端显示未租整租房子id
		List<String> soloHouseIds = zhongzHouseMapper.selectZhongzHouseSoloRentIds();
		if(soloHouseIds != null && soloHouseIds.size() > 0) {
			houseIds.addAll(soloHouseIds);
		}
		//所有前端显示有未租房间的合租房id（只有合租房有房间租住状态信息，所以这里不考虑查出整租房的情况）
		List<String> jointHouseIds = zhongzRoomMapper.selectZhongzRoomList1();
		if(jointHouseIds != null && jointHouseIds.size() > 0) {
			houseIds.addAll(jointHouseIds);
		}
		if(houseIds != null && houseIds.size() > 0) {
			zhongzHouseParam.setHouseIds(houseIds);
			//TODO 查询指定热度标签集合对应的houseIds（中间表联合查询）,与之做交集（未租状态且含指定热度标签的）

			//有序集合，通过数据库sql已实现热度、更新时间倒序
			List<ZhongzHouse> houses = zhongzHouseMapper.selectZhongzHouseRentList(zhongzHouseParam);
			//小区信息
			List<String> estateIds = new ArrayList<>();
			for(ZhongzHouse house : houses) {
				estateIds.add(house.getEstateId());
			}
			List<ZhongzEstate> estates = zhongzEstateMapper.selectZhongzEstateList1(estateIds.toArray(new String[estateIds.size()]));
			Map<String,ZhongzEstate> estateMap = new HashMap<>();
			for(ZhongzEstate estate : estates) {
				estateMap.put(estate.getId(),estate);
			}
			for(ZhongzHouse house : houses) {
				house.setEstate(estateMap.get(house.getEstateId()));
			}
			//过滤条件：按关键字或历史标签模糊搜索地名或小区名
			String keyWord = zhongzHouseParam.getKeyWord();
			//关键字
			if(StringUtils.isNotBlank(keyWord)) {
				List<ZhongzHouse> searchHouses = new ArrayList<>();
				//houses是热度、更新时间倒序，遍历、插入另一个有序集合仍然是热度、更新时间倒序，不需要应用层排序
				for(ZhongzHouse house : houses) {
					if(StringUtils.isNotBlank(house.getRegion()) && house.getRegion().indexOf(keyWord) != -1) {
						searchHouses.add(house);
					}//不重复添加
					else if(house.getEstate() != null && StringUtils.isNotBlank(house.getEstate().getName())
							&& house.getEstate().getName().indexOf(keyWord) != -1) {
						searchHouses.add(house);
					}
				}
				return searchHouses;
			}
			return houses;
		}
		return new ArrayList<>();
	}

    /**
     * 新增房屋
     * 
     * @param zhongzHouse 房屋信息
     * @return 结果
     */
	@Override
	public int insertZhongzHouse(ZhongzHouse zhongzHouse)
	{
		zhongzHouse.preInsert();
		return zhongzHouseMapper.insertZhongzHouse(zhongzHouse);
	}
	
	/**
     * 修改房屋
     * 
     * @param zhongzHouse 房屋信息
     * @return 结果
     */
	@Override
	public int updateZhongzHouse(ZhongzHouse zhongzHouse)
	{
		zhongzHouse.preUpdate();
		return zhongzHouseMapper.updateZhongzHouse(zhongzHouse);
	}

	/**
     * 删除房屋对象
     * 
     * @param ids 需要删除的数据ID
     * @return 结果
     */
	@Override
	public int deleteZhongzHouseByIds(String ids)
	{
		return zhongzHouseMapper.deleteZhongzHouseByIds1(Convert.toStrArray(ids));
	}
	
}
