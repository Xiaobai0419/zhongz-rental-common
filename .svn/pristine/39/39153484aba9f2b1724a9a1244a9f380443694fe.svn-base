package com.zhongz.rental.service.impl;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.List;

import com.zhongz.rental.common.utils.OrderUtils;
import com.zhongz.rental.domain.ZhongzContract;
import com.zhongz.rental.domain.ZhongzServiceOrder;
import com.zhongz.rental.domain.ZhongzUser;
import com.zhongz.rental.mapper.ZhongzContractMapper;
import com.zhongz.rental.mapper.ZhongzServiceOrderMapper;
import com.zhongz.rental.mapper.ZhongzUserMapper;
import com.zhongz.rental.param.ZhongzUserServiceOrderParam;
import com.zhongz.rental.result.base.Result;
import com.zhongz.rental.service.IZhongzServiceOrderService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.HashOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import com.ruoyi.common.core.text.Convert;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;

/**
 * 服务订单 服务层实现
 * 
 * @author ruoyi
 * @date 2019-05-07
 */
@Service
public class ZhongzServiceOrderServiceImpl implements IZhongzServiceOrderService
{
	@Value("${redis.keys.user}")
	private String userKey;
	@Value("${web.upload-path}")
	private String uploadPath;
	@Value("${web.domain}")
	private String webDomain;
	@Value("${web.port}")
	private Integer webPort;
	@Autowired
	private ZhongzUserMapper zhongzUserMapper;
	@Autowired
	private ZhongzContractMapper zhongzContractMapper;
	@Autowired
	private ZhongzServiceOrderMapper zhongzServiceOrderMapper;
	@Autowired
	private OrderUtils orderUtils;
	@Autowired
	private RedisTemplate<String,Object> redisTemplate;

	/**
     * 查询服务订单信息
     * 
     * @param id 服务订单ID
     * @return 服务订单信息
     */
    @Override
	public ZhongzServiceOrder selectZhongzServiceOrderById(String id)
	{
	    return zhongzServiceOrderMapper.selectZhongzServiceOrderById(id);
	}
	
	/**
     * 查询服务订单列表
     * 
     * @param zhongzServiceOrder 服务订单信息
     * @return 服务订单集合
     */
	@Override
	public List<ZhongzServiceOrder> selectZhongzServiceOrderList(ZhongzServiceOrder zhongzServiceOrder)
	{
	    return zhongzServiceOrderMapper.selectZhongzServiceOrderList(zhongzServiceOrder);
	}
	
    /**
     * 新增报修服务订单
     * 
     * @param zhongzUserServiceOrderParam 服务订单信息
     * @return 结果
     */
	@Override
	public Result insertZhongzServiceOrder(MultipartFile[] files, ZhongzUserServiceOrderParam zhongzUserServiceOrderParam, HttpServletRequest request)
	{
		//从Redis获取用户信息，没有降级去数据库获取
		String openid = zhongzUserServiceOrderParam.getOpenid();
		String sessionKey = zhongzUserServiceOrderParam.getSessionKey();
		HashOperations<String, String, ZhongzUser> hashOperations =  redisTemplate.opsForHash();
		ZhongzUser user = hashOperations.get(userKey,openid);
		if(user == null) {
			user = zhongzUserMapper.selectZhongzUserByOpenIdAndSessionKey(openid,sessionKey);
		}
		Result result = new Result();
		//参数校验和数据库业务数据存在性校验
		if(StringUtils.isBlank(zhongzUserServiceOrderParam.getHouseId())) {
			result.setSuccess(false);
			result.setResultCode(400);
			result.setMessage("请选择报修房屋");
			return result;
		}
		//查询用户选择房屋对应的最新租期内有效签约合同（可能是首租可能是续租）
		ZhongzContract latestContract = zhongzContractMapper.selectZhongzLatestContractByUserAndHouse(user.getId(),zhongzUserServiceOrderParam.getHouseId());
		if(latestContract == null) {
			result.setSuccess(false);
			result.setResultCode(403);
			result.setMessage("您没有该房屋的租期内合同");
			return result;
		}
		if(zhongzUserServiceOrderParam.getRequestServiceType() == null) {
			result.setSuccess(false);
			result.setResultCode(400);
			result.setMessage("请选择报修类型");
			return result;
		}
		if(StringUtils.isBlank(zhongzUserServiceOrderParam.getServiceDescription())) {
			result.setSuccess(false);
			result.setResultCode(400);
			result.setMessage("请输入报修内容");
			return result;
		}
		//生成订单号
		ZhongzServiceOrder zhongzServiceOrder = orderUtils.generateServiceOrder("BXDD",0);
		zhongzServiceOrder.preInsert();
		zhongzServiceOrder.setOrderStatus(0);
		zhongzServiceOrder.setOrderTime(new Date());
		zhongzServiceOrder.setHouseId(zhongzUserServiceOrderParam.getHouseId());
		zhongzServiceOrder.setRequestServiceType(zhongzUserServiceOrderParam.getRequestServiceType());
		zhongzServiceOrder.setServiceDescription(zhongzUserServiceOrderParam.getServiceDescription());
		//设置用户信息
		zhongzServiceOrder.setTenantId(user.getId());
		//获取该房子合同对应用户真实姓名和手机号
		zhongzServiceOrder.setName(latestContract.getName());
		zhongzServiceOrder.setMobile(latestContract.getMobile());
		if(files != null && files.length > 0) {
			//文件上传本地，生成静态地址入库
			File rootPath = null;
			try {
				rootPath = new File(uploadPath);
			} catch (Exception e) {
				e.printStackTrace();
				result.setSuccess(false);
				result.setResultCode(403);
				result.setMessage("图片上传失败");
				return result;
			}
			File uploadDir = new File(rootPath.getAbsolutePath(),"images/upload/repairReportPics/" + user.getOpenid() + "/");
			if(!uploadDir.exists()) {
				uploadDir.mkdirs();
			}
			StringBuilder pictures = new StringBuilder();
			for(MultipartFile file : files) {
				InputStream inputStream = null;
				try {
					inputStream = file.getInputStream();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if(inputStream == null) {
					result.setSuccess(false);
					result.setResultCode(400);
					result.setMessage("上传图片有误");
					return result;
				}
				String fileName = file.getOriginalFilename();
				File uploadPath = new File(uploadDir.getAbsolutePath(),fileName);
				try {
					file.transferTo(uploadPath);
				} catch (IOException e) {
					e.printStackTrace();
					result.setSuccess(false);
					result.setResultCode(403);
					result.setMessage("图片上传失败");
					return result;
				}
				String filePath = webDomain + ":" + webPort + request.getServletContext().getContextPath() + "/images/upload/repairReportPics/" + user.getOpenid() + "/" + fileName;
				pictures.append(filePath).append(",");
			}
			pictures.deleteCharAt(pictures.length() - 1);
			zhongzServiceOrder.setPictures(pictures.toString());
		}
	    int res = zhongzServiceOrderMapper.insertZhongzServiceOrder(zhongzServiceOrder);
		if(res > 0) {
			result.setSuccess(true);
			result.setResultCode(200);
			result.setMessage("报修提交成功");
		}else {
			result.setSuccess(false);
			result.setResultCode(403);
			result.setMessage("报修提交失败");
		}
		return result;
	}
	
	/**
     * 修改服务订单
     * 
     * @param zhongzServiceOrder 服务订单信息
     * @return 结果
     */
	@Override
	public int updateZhongzServiceOrder(ZhongzServiceOrder zhongzServiceOrder)
	{
	    return zhongzServiceOrderMapper.updateZhongzServiceOrder(zhongzServiceOrder);
	}

	/**
     * 删除服务订单对象
     * 
     * @param ids 需要删除的数据ID
     * @return 结果
     */
	@Override
	public int deleteZhongzServiceOrderByIds(String ids)
	{
		return zhongzServiceOrderMapper.deleteZhongzServiceOrderByIds1(Convert.toStrArray(ids));
	}
	
}
