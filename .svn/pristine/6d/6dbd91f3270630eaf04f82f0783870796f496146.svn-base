package com.zhongz.rental.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSONObject;
import com.zhongz.rental.common.utils.HttpClientUtils;
import com.zhongz.rental.domain.ZhongzUser;
import com.zhongz.rental.domain.ZhongzValidateCode;
import com.zhongz.rental.mapper.ZhongzUserMapper;
import com.zhongz.rental.param.ZhongzUserParam;
import com.zhongz.rental.result.LoginResult;
import com.zhongz.rental.result.base.Result;
import com.zhongz.rental.service.IZhongzUserService;
import com.zhongz.rental.service.IZhongzValidateCodeService;
import lombok.extern.java.Log;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import com.ruoyi.common.core.text.Convert;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 * 用户 服务层实现
 * 
 * @author ruoyi
 * @date 2019-04-15
 */
@Log
@Service
public class ZhongzUserServiceImpl implements IZhongzUserService
{
	@Value("${wechat.AppID}")
	private String appID;
	@Value("${wechat.AppSecret}")
	private String appSecret;

	@Autowired
	private ZhongzUserMapper zhongzUserMapper;
	@Autowired
	private IZhongzValidateCodeService zhongzValidateCodeService;

	/**
     * 查询用户信息
     * 
     * @param id 用户ID
     * @return 用户信息
     */
    @Override
	public ZhongzUser selectZhongzUserById(String id)
	{
	    return zhongzUserMapper.selectZhongzUserById(id);
	}

	/**
	 * 用户登录（微信授权登录、手机号登录）
	 *
	 * @param zhongzUserParam 用户信息参数
	 * @return 用户信息
	 */
	@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.READ_COMMITTED,readOnly = false)
	@Override
	public LoginResult zhongzUserLogin(ZhongzUserParam zhongzUserParam)
	{
		LoginResult result = new LoginResult();
		//判断是否有前台wx.login()后带过来的用户唯一授权code信息,没有，返回，提示缺少登录授权信息
		String wx_code = zhongzUserParam.getCode();
		String mobile = zhongzUserParam.getMobile();
		String validateCode = zhongzUserParam.getValidateCode();
		if(StringUtils.isBlank(wx_code)) {
			result.setSuccess(false);
			result.setResultCode(401);
			result.setMessage("缺少小程序登录凭证code");
			return result;
		}
		//判断如果是手机登录，是否有验证码--手机号登录和微信登录（不需要手机号）放在了一起，手机号登录前端需要判断手机号不能为空，否则空号仍可通过微信授权信息成功登录
		if(StringUtils.isNotBlank(mobile) && StringUtils.isBlank(validateCode)) {
			result.setSuccess(false);
			result.setResultCode(400);
			result.setMessage("手机登录缺少验证码");
			return result;
		}else if(StringUtils.isNotBlank(mobile)) {
			//验证验证码，失败返回验证码错误
			ZhongzValidateCode zhongzValidateCode = new ZhongzValidateCode();
			zhongzValidateCode.setMobile(mobile);
			zhongzValidateCode.setCode(validateCode);
			Result validateResult = zhongzValidateCodeService.selectZhongzValidateCode(zhongzValidateCode);
			if(validateResult != null && !validateResult.getSuccess()) {
				result.setSuccess(false);
				result.setResultCode(400);
				result.setMessage("验证码错误");
				return result;
			}
		}
		//使用code调用微信小程序登录流程，获取openid,查询是否有此openid用户，有，判断是否传递手机号，有，更新手机号，登录成功
		String httpsUrl = "https://api.weixin.qq.com/sns/jscode2session";
		Map<String, String> params = new HashMap<>();
		params.put("appid", appID);
		params.put("secret", appSecret);
		params.put("js_code", wx_code);
		params.put("grant_type", "authorization_code");
		Map<String, String> header = new HashMap<>();
		String openId = null;
		String sessionKey = null;
		String unionid = null;
		try {
			String resultString = HttpClientUtils.doGetRequest(httpsUrl, header, params);
			openId = (String) JSONObject.parseObject(resultString).get("openid");
			sessionKey = (String) JSONObject.parseObject(resultString).get("session_key");
			unionid = (String) JSONObject.parseObject(resultString).get("unionid");
		}catch (Exception e) {
			log.info("微信小程序服务端错误");
			e.printStackTrace();
		}
		if(StringUtils.isBlank(openId) || StringUtils.isBlank(sessionKey) || StringUtils.isBlank(unionid)) {
			result.setSuccess(false);
			result.setResultCode(403);
			result.setMessage("无法获取用户微信登录授权信息");
			return result;
		}
		ZhongzUser zhongzUser = new ZhongzUser();
		zhongzUser.setOpenid(openId);
		//每次更新会话秘钥
		zhongzUser.setSessionKey(sessionKey);
		zhongzUser.setUnionid(unionid);
		if(StringUtils.isNotBlank(mobile)) {
			zhongzUser.setMobile(mobile);
		}
		ZhongzUser user = zhongzUserMapper.selectZhongzUserByOpenId(openId);
		if(user != null && StringUtils.isNotBlank(user.getOpenid())) {
			zhongzUser.preUpdate();
			//更新登录时间
			zhongzUser.setLastLoginTime(new Date());
			zhongzUserMapper.updateZhongzUserByOpenId(zhongzUser);
		}
		//无此openid用户，注册插入，判断是否传递手机号，有，同步插入手机号，注册、登录成功
		else {
			zhongzUser.preInsert();
			//更新注册时间
			zhongzUser.setRegisterTime(new Date());
			//更新登录时间
			zhongzUser.setLastLoginTime(new Date());
			zhongzUserMapper.insertZhongzUser(zhongzUser);
		}
		//返回更新的用户信息，包括openid，新的会话秘钥等信息用于登录后的新会话
		user = zhongzUserMapper.selectZhongzUserByOpenId(openId);
		result.setSuccess(true);
		result.setResultCode(200);
		result.setMessage("登录成功");
		result.setUser(user);
		return result;
	}

	/**
     * 查询用户列表
     * 
     * @param zhongzUser 用户信息
     * @return 用户集合
     */
	@Override
	public List<ZhongzUser> selectZhongzUserList(ZhongzUser zhongzUser)
	{
	    return zhongzUserMapper.selectZhongzUserList(zhongzUser);
	}
	
    /**
     * 新增用户
     * 
     * @param zhongzUser 用户信息
     * @return 结果
     */
	@Override
	public int insertZhongzUser(ZhongzUser zhongzUser)
	{
	    return zhongzUserMapper.insertZhongzUser(zhongzUser);
	}
	
	/**
     * 修改用户
     * 
     * @param zhongzUser 用户信息
     * @return 结果
     */
	@Override
	public int updateZhongzUser(ZhongzUser zhongzUser)
	{
	    return zhongzUserMapper.updateZhongzUser(zhongzUser);
	}

	/**
     * 删除用户对象
     * 
     * @param ids 需要删除的数据ID
     * @return 结果
     */
	@Override
	public int deleteZhongzUserByIds(String ids)
	{
		return zhongzUserMapper.deleteZhongzUserByIds1(Convert.toStrArray(ids));
	}
	
}
