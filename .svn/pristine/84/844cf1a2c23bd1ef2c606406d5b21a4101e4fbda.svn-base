package com.zhongz.rental.service.impl;

import com.ruoyi.common.core.text.Convert;
import com.zhongz.rental.domain.ZhongzEstate;
import com.zhongz.rental.domain.ZhongzHouse;
import com.zhongz.rental.mapper.ZhongzEstateMapper;
import com.zhongz.rental.mapper.ZhongzHouseMapper;
import com.zhongz.rental.mapper.ZhongzRoomMapper;
import com.zhongz.rental.param.ZhongzHouseParam;
import com.zhongz.rental.service.IZhongzHouseService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

/**
 * 房屋 服务层实现
 * 
 * @author ruoyi
 * @date 2019-04-04
 */
@Service
public class ZhongzHouseServiceImpl implements IZhongzHouseService
{
	@Autowired
	private ZhongzHouseMapper zhongzHouseMapper;
	@Autowired
	private ZhongzRoomMapper zhongzRoomMapper;
	@Autowired
	private ZhongzEstateMapper zhongzEstateMapper;

	/**
     * 查询房屋信息
     * 
     * @param id 房屋ID
     * @return 房屋信息
     */
    @Override
	public ZhongzHouse selectZhongzHouseById(String id)
	{
	    return zhongzHouseMapper.selectZhongzHouseById(id);
	}
	
	/**
     * 查询房屋列表
     * 
     * @param zhongzHouse 房屋信息
     * @return 房屋集合
     */
	@Override
	public List<ZhongzHouse> selectZhongzHouseList(ZhongzHouse zhongzHouse)
	{
	    return zhongzHouseMapper.selectZhongzHouseList(zhongzHouse);
	}

	/**
	 * 客户端首页可租房源列表
	 *
	 * @param zhongzHouseParam 房屋信息
	 * @return 房屋集合
	 */
	@Override
	public List<ZhongzHouse> selectZhongzHouseList1(ZhongzHouseParam zhongzHouseParam)
	{
		//所有前端显示未租整租房子
		List<ZhongzHouse> soloHouses = zhongzHouseMapper.selectZhongzHouseList1();
		List<String> jointHouseIds = zhongzRoomMapper.selectZhongzRoomList1();
		if(jointHouseIds != null && jointHouseIds.size() > 0) {
			//所有前端显示有未租房间的合租房
			List<ZhongzHouse> jointHouses = zhongzHouseMapper.selectZhongzHouseList2(jointHouseIds.toArray(new String[jointHouseIds.size()]));
			if(soloHouses != null && jointHouses != null) {
				soloHouses.addAll(jointHouses);
			}
		}
		if(soloHouses != null && soloHouses.size() > 0) {
			//小区信息
			List<String> estateIds = new ArrayList<>();
			for(ZhongzHouse house : soloHouses) {
				estateIds.add(house.getEstateId());
			}
			List<ZhongzEstate> estates = zhongzEstateMapper.selectZhongzEstateList1(estateIds.toArray(new String[estateIds.size()]));
			Map<String,ZhongzEstate> estateMap = new HashMap<>();
			for(ZhongzEstate estate : estates) {
				estateMap.put(estate.getId(),estate);
			}
			for(ZhongzHouse house : soloHouses) {
				house.setEstate(estateMap.get(house.getEstateId()));
			}
			//排序器
			Comparator<ZhongzHouse> comparator = new Comparator<ZhongzHouse>() {
				@Override
				public int compare(ZhongzHouse o1, ZhongzHouse o2) {
					if(o1.getTagsValue() > o2.getTagsValue()) {return -1;}
					else if(o1.getTagsValue() < o2.getTagsValue()) {return 1;}
					else if(o1.getUpdateTime().getTime() > o2.getUpdateTime().getTime()) {return -1;}
					else if(o1.getUpdateTime().getTime() < o2.getUpdateTime().getTime()) {return 1;}
					return 0;
				}
			};
			//过滤条件
			String keyWord = zhongzHouseParam.getKeyWord();
			String historyTag = zhongzHouseParam.getHistoryTag();
			List<ZhongzHouse> houses = new ArrayList<>();
			//关键字
			if(StringUtils.isNotBlank(keyWord)) {
				for(ZhongzHouse house : soloHouses) {
					if(StringUtils.isNotBlank(house.getRegion()) && house.getRegion().indexOf(keyWord) != -1) {
						houses.add(house);
					}//不重复添加
					else if(house.getEstate() != null && StringUtils.isNotBlank(house.getEstate().getName())
							&& house.getEstate().getName().indexOf(keyWord) != -1) {
						houses.add(house);
					}
				}
				//热度、更新时间倒序
				Collections.sort(houses, comparator);
				return houses;
			}
			//历史标签
			else if(StringUtils.isNotBlank(historyTag)) {
				for(ZhongzHouse house : soloHouses) {
					if(StringUtils.isNotBlank(house.getRegion()) && house.getRegion().indexOf(historyTag) != -1) {
						houses.add(house);
					}//不重复添加
					else if(house.getEstate() != null && StringUtils.isNotBlank(house.getEstate().getName())
							&& house.getEstate().getName().indexOf(historyTag) != -1) {
						houses.add(house);
					}
				}
				//热度、更新时间倒序
				Collections.sort(houses, comparator);
				return houses;
			}
			//热度、更新时间倒序
			Collections.sort(soloHouses, comparator);
		}
		return soloHouses;
	}

    /**
     * 新增房屋
     * 
     * @param zhongzHouse 房屋信息
     * @return 结果
     */
	@Override
	public int insertZhongzHouse(ZhongzHouse zhongzHouse)
	{
		zhongzHouse.preInsert();
		return zhongzHouseMapper.insertZhongzHouse(zhongzHouse);
	}
	
	/**
     * 修改房屋
     * 
     * @param zhongzHouse 房屋信息
     * @return 结果
     */
	@Override
	public int updateZhongzHouse(ZhongzHouse zhongzHouse)
	{
		zhongzHouse.preUpdate();
		return zhongzHouseMapper.updateZhongzHouse(zhongzHouse);
	}

	/**
     * 删除房屋对象
     * 
     * @param ids 需要删除的数据ID
     * @return 结果
     */
	@Override
	public int deleteZhongzHouseByIds(String ids)
	{
		return zhongzHouseMapper.deleteZhongzHouseByIds1(Convert.toStrArray(ids));
	}
	
}
